<div title="PyodideConsole" modifier="Wang Yanshu" created="202502161845" modified="202502161927" creator="Wang Yanshu">
<pre><html>
<iframe src="data:text/html;base64,"
              height="300px" width="500px">
</html>
Credits to https://github.com/pyodide/pyodide/blob/main/src/templates/console.html</pre>
</div>
